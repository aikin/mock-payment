apply plugin: 'java'
apply plugin: 'flyway'
apply from: "db.mysql.gradle"

version = '1.0'

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.flywaydb:flyway-gradle-plugin:3.0"
    }
}

//uploadArchives {
//    repositories {
//        mavenDeployer {
//            repository(url: uri(project.getRootProject().projectDir.getPath() + '/mavenRepo'))
//        }
//    }
//}

//jar {
//    exclude("payment.properties")
//    exclude("log4j.properties")
//}

ext {
    guiceVersion = '3.0'
    junitVersion = '4.11'
    jerseyVersion = '2.18'
    mockitoVersion = '1.9.5'
    hamcrestVersion = '1.3'
    log4jVersion = '1.2.17'
    slf4jVersion = '1.7.7'
    guavaVersion = '18.0'
    gsonVersion = '2.2.4'
    servletApiVersion = "3.0.1"
    grizzlyHttpServletVersion = "2.3.8"
    guiceBridgeVersion = "2.3.0"
    rsVersion = "2.0"
    myBatisVersion = '3.2.7'
    myBatisGuiceVersion = '3.6'
    jodaTimeVersion = '2.6'
    jodaMoneyVersion = '0.10.0'
}

dependencies {

    compile "log4j:log4j:$log4jVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    compile "com.google.inject.extensions:guice-multibindings:$guiceVersion"
    compile "com.google.inject.extensions:guice-servlet:$guiceVersion"
    compile "com.google.inject:guice:$guiceVersion"
    compile "org.glassfish.hk2:guice-bridge:$guiceBridgeVersion"

    compile "com.google.guava:guava:$guavaVersion"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "org.glassfish.jersey.core:jersey-server:$jerseyVersion"
    compile "org.glassfish.jersey.core:jersey-client:$jerseyVersion"
    compile "org.glassfish.grizzly:grizzly-http-servlet:$grizzlyHttpServletVersion"
    compile "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$jerseyVersion"
    compile "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion"
    compile "javax.ws.rs:javax.ws.rs-api:$rsVersion"
    compile "javax.servlet:javax.servlet-api:$servletApiVersion"

    compile "org.mybatis:mybatis:$myBatisVersion"
    compile "org.mybatis:mybatis-guice:$myBatisGuiceVersion"
//    compile 'mysql:mysql-connector-java:5.1.34'


    compile "joda-time:joda-time:$jodaTimeVersion"
    compile "org.joda:joda-money:$jodaMoneyVersion"


    testCompile "junit:junit:$junitVersion"
    testCompile "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testCompile "org.mockito:mockito-all:$mockitoVersion"
    testCompile "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:$jerseyVersion"
    testCompile "org.glassfish.jersey.test-framework:jersey-test-framework-core:$jerseyVersion"
    testCompile "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-bundle:$jerseyVersion"
    testCompile "org.glassfish.jersey.test-framework:jersey-test-framework-util:$jerseyVersion"
}

task startServer(type: JavaExec) {
    main = "com.thoughtworks.mockpayment.app.Server"
    classpath = sourceSets.main.runtimeClasspath
}

task standaloneJar(type: Jar, dependsOn: jar) {
    baseName = "mockpay"
    classifier = "standalone"
    version = ""

    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)

    from configurations.runtime.asFileTree.files.collect { zipTree(it) }

    exclude("META-INF/*.SF")
    exclude("META-INF/*.DSA")
    exclude("META-INF/*.RSA")
    exclude("META-INF/*.RSA")
    exclude("META-INF/*.RSA")
    exclude("db.properties")
    exclude("log4j.properties")
    exclude("mock-payment-mybatis.properties")
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
